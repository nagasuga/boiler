#!/usr/bin/python

from __future__ import print_function
import argparse
import json
import logging
import os
import shutil
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO
import urllib2
import zipfile


VERSION = '0.2.0'


class Config(object):
    def __init__(self, file_path):
        self.file_path = file_path
        self.config = {
            'version': VERSION,
            'boilerplates': {
            },
        }
        self.initialize()

    def initialize(self):
        if not os.path.exists(self.file_path):
            logging.info('Creating config: {}'.format(self.file_path))
            self.save()
        else:
            self.load()

        if self.config['version'] < VERSION:
            self.update_version()

    def save(self):
        with open(self.file_path, 'w') as f_obj:
            f_obj.write(json.dumps(self.config, indent=4))

    def load(self):
        self.config = json.loads(open(self.file_path, 'r').read())

    def update_version(self):
        self.config['version'] = VERSION
        self.save()


class Boilerplates(object):
    def __init__(self, root_dir='~/.boiler'):
        self.root_dir = os.path.expanduser(root_dir)
        self.boiler_dir = os.path.join(self.root_dir, 'boilerplates')
        self.initialize()

        config_path = os.path.join(self.root_dir , 'config.json')
        self.config = Config(file_path=config_path)

    def initialize(self):
        # check and initialize ~/.boiler directory
        if not os.path.exists(self.root_dir):
            logging.info('Creating config directory: {}'.format(self.root_dir))
            os.makedirs(self.root_dir)

        if not os.path.exists(self.boiler_dir):
            logging.info('Creating config directory: {}'.format(self.boiler_dir))
            os.makedirs(self.boiler_dir)

    def pull(self, src_path, name):
        branch = 'master'
        uri = 'https://{}/archive/{}.zip'.format(src_path, branch)
        resp = urllib2.urlopen(uri)
        f_obj = StringIO(resp.read())
        zip_obj = zipfile.ZipFile(f_obj, 'r')
        zip_obj.extractall()

        orig = '{}-{}'.format(src_path.split('/')[-1], branch)
        dest = os.path.join(self.boiler_dir, name)
        os.rename(orig, dest)

    def _raw_boilers(self):
        return os.listdir(self.boiler_dir)

    def list(self):
        print('Available boilerplates')
        for item in self._raw_boilers():
            print('    {}'.format(item))

    def remove(self, name):
        if name not in self._raw_boilers():
            err_msg = '"{}" does not exist.'.format(name)
            logging.error(err_msg)
            return None

        boilerplate_path = os.path.join(self.boiler_dir, name)
        try:
            shutil.rmtree(boilerplate_path)
        except Exception as err:
            logging.error('Unable to remove boilerplate target file(s) {}: {}'.format(boilerplate_path, err))

        logging.info('Removed boilerplate {}'.format(name))

    def create(self, name, target):
        boilerplate_path = os.path.join(self.boiler_dir, name)
        if os.path.exists(target):
            logging.error('Unable to create file/directory. Already exists: '
                          '{}'.format(target))
            return None

        if not os.path.isdir(boilerplate_path):
            shutil.copyfile(boilerplate_path, target)
        else:
            shutil.copytree(boilerplate_path, target)


def set_logger(is_verbose=False):
    level = logging.WARNING
    if is_verbose:
        level = logging.DEBUG
    logging.basicConfig(level=level, format='%(levelname)s: %(message)s')


def setup_args():
    parser = argparse.ArgumentParser(
        description='CLI for creating boilerplate files, directories, and '
                    'structures')
    parser.add_argument('-v', dest='is_verbose', action='store_true',
                        help='Verbose mode to print more information')

    subparsers = parser.add_subparsers(help='Sub-command help', dest='command')
    pull_parser = subparsers.add_parser('pull', help='Download boilerplate')
    list_parser = subparsers.add_parser('ls', help='List all saved boilerplates')
    remove_parser = subparsers.add_parser('rm', help='Remove boilerplates')
    create_parser = subparsers.add_parser('create', help='Create boilerplate')

    pull_parser.add_argument('path', type=str,
                            help='Path of the boilerplate to be downloaded')
    pull_parser.add_argument('name', type=str,
                            help='Name for the boilerplate to be downloaded')

    remove_parser.add_argument('name', type=str,
                               help='Name for the boilerplate to be removed')

    create_parser.add_argument('name', type=str,
                               help='Name for the boilerplate to be used '
                                    'during "create" command')
    create_parser.add_argument('target', type=str,
                               help='target file/directory to be copied to '
                                    'prepare as boilerplate')

    return parser.parse_args()


if __name__ == '__main__':
    args = setup_args()
    set_logger(is_verbose=args.is_verbose)

    boil = Boilerplates()
    boil.initialize()

    if args.command == 'pull':
        boil.pull(args.path, name=args.name)
    elif args.command == 'ls':
        boil.list()
    elif args.command == 'rm':
        boil.remove(name=args.name)
    elif args.command == 'create':
        boil.create(name=args.name, target=args.target)
